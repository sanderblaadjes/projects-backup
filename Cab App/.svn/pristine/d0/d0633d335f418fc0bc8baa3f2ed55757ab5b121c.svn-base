package com.android.cabapp.receiver;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import com.android.cabapp.activity.ChatActivity;
import com.android.cabapp.activity.LogInActivity;
import com.android.cabapp.activity.MainActivity;
import com.android.cabapp.activity.RootActivity;
import com.android.cabapp.util.AppValues;
import com.android.cabapp.util.Constants;
import com.android.cabapp.util.Util;
import com.urbanairship.UAirship;
import com.urbanairship.actions.ActionUtils;
import com.urbanairship.actions.DeepLinkAction;
import com.urbanairship.actions.LandingPageAction;
import com.urbanairship.actions.OpenExternalUrlAction;
import com.urbanairship.push.GCMMessageHandler;
import com.urbanairship.push.PushManager;

public class IntentReceiver extends BroadcastReceiver {

	private static final String logTag = "IntentReceiver";

	// A set of actions that launch activities when a push is opened. Update
	// with any custom actions that also start activities when a push is opened.
	private static String[] ACTIVITY_ACTIONS = new String[] {
			DeepLinkAction.DEFAULT_REGISTRY_NAME,
			OpenExternalUrlAction.DEFAULT_REGISTRY_NAME,
			LandingPageAction.DEFAULT_REGISTRY_NAME };

	@Override
	public void onReceive(Context context, Intent intent) {
		Log.i(logTag, "Received intent: " + intent.getExtras());

		// {
		// "addInfo": "3146",
		// "collapse_key": "10GjaQ0JT9WGwf2GJwgAVg",
		// "com.urbanairship.push.ALERT": "Fhhf",
		// "sound": "",
		// "com.urbanairship.push.PUSH_ID":
		// "a4766d93-2cf2-11e4-a208-90e2ba299b38",
		// "from": "620053630363",
		// "type": "messagetodriver",
		// "com.urbanairship.push.APID": "7a3066d3-2a92-492a-9160-cf9990047ffe",
		// "com.urbanairship.push.CANONICAL_PUSH_ID":
		// "a4753682-2cf2-11e4-bddc-90e2ba025308"
		// }

		// {"com.urbanairship.push.ALERT":"Welcome to CabApp","collapse_key":"HDpkQVZ3Tr+Q7vM908oiiQ","sound":"push.mp3","com.urbanairship.push.PUSH_ID":"c394c2e0-39f3-11e4-9db0-90e2ba287ae8","from":"620053630363","type":"message","com.urbanairship.push.APID":"8a9b87eb-62c6-4497-971d-c89a9f7f79b7","com.urbanairship.push.CANONICAL_PUSH_ID":"c393acca-39f3-11e4-b3d1-90e2ba025308"}

		// {"addInfo":"4307","collapse_key":"hIDi9vVKTRaZQ6XAHemFoQ","com.urbanairship.push.ALERT":"booking has been cancelled","sound":"push.mp3","com.urbanairship.push.PUSH_ID":"6af77590-3ff4-11e4-b88c-90e2ba027a20","from":"620053630363","type":"bookingcancelled","com.urbanairship.push.APID":"4ad644ce-d9e2-4c9e-b205-bfe9ba7d3c4d","com.urbanairship.push.CANONICAL_PUSH_ID":"6af5f3aa-3ff4-11e4-86b5-90e2ba272c68"}

		String action = intent.getAction();
		String message = intent.getStringExtra(PushManager.EXTRA_ALERT);
		String messageType = intent.getStringExtra("type");
		String jobID = intent.getStringExtra("addInfo");
		Log.i(logTag, "action:: " + action + "  message:: " + message
				+ " messagetype:: " + messageType);
		if (action == null) {
			return;
		}

		if (action.equals(PushManager.ACTION_PUSH_RECEIVED)) {

			int id = intent.getIntExtra(PushManager.EXTRA_NOTIFICATION_ID, 0);
			// int id = R.id.icon;

			Log.i(logTag,
					"Received push notification. Alert: "
							+ intent.getStringExtra(PushManager.EXTRA_ALERT)
							+ " [NotificationID=" + id + "]");

			String ns = Context.NOTIFICATION_SERVICE;
			NotificationManager nMgr = (NotificationManager) UAirship.shared()
					.getApplicationContext().getSystemService(ns);

			logPushExtras(intent);

			Log.e("IntentReceiver", "Job Id received:: " + jobID
					+ "  ChatThread current job ID: " + ChatActivity.szJobID);

			if (messageType.equals("messagetodriver")
					&& ChatActivity.mChatActivityContext != null) {
				if (jobID.equals(ChatActivity.szJobID)) {
					intent.setAction("NewMessage");
					LocalBroadcastManager.getInstance(context).sendBroadcast(
							intent);
					// nMgr.cancelAll();
					nMgr.cancel(id);
				}
				return;
			}

			if (Util.mContext != null && messageType.equals("bookingcancelled")) {
				if (nMgr != null)
					nMgr.cancel(id);
				// nMgr.cancelAll();

				/* Vashita */
				/*
				 * Util.showAlertDialog(Util.mContext, "Booking with ID " +
				 * jobID + " has been cancelled");
				 */

				intent.setAction("NewJobs");
				LocalBroadcastManager.getInstance(context)
						.sendBroadcast(intent);

				/* Vashita */
				// intent.setAction("JobCancelled");
				// LocalBroadcastManager.getInstance(context)
				// .sendBroadcast(intent);
				if (Util.bIsJobAcceptedFragment) {
					Util.showCancelJobAlertDialogOk(Util.mContext);
				} else {
					Util.showCancelJobAlertDialog(Util.mContext);
				}

				return;
			}

			if (Util.mContext != null && messageType.equals("newbookings")) {
				if (!MainActivity.ms_bIsInBackground)
					nMgr.cancelAll();
				if (Util.bIsNowOrPreebookFragment) {
					intent.setAction("NewJobs");
					LocalBroadcastManager.getInstance(context).sendBroadcast(
							intent);
				} else if (RootActivity.mContext != null) {
					RootActivity.showJobsAlertDialog();
				} else
					Util.showJobsAlertDialog(Util.mContext);
				return;
			}

			if (Util.mContext != null && !messageType.equals("messagetodriver")
					&& !messageType.equals("message")) {
				if (nMgr != null)
					nMgr.cancel(id);
				// nMgr.cancelAll();
				Util.showAlertDialog(Util.mContext, message);
			}

		} else if (action.equals(PushManager.ACTION_NOTIFICATION_OPENED)) {
			Log.i(logTag,
					"User clicked notification. Message: "
							+ intent.getStringExtra(PushManager.EXTRA_ALERT));
			logPushExtras(intent);

			// Only launch the main activity if the payload does not contain any
			// actions that might have already opened an activity

			if (!ActionUtils.containsRegisteredActions(intent.getExtras(),
					ACTIVITY_ACTIONS)) {
				Intent launch = new Intent(Intent.ACTION_MAIN);
				if (messageType.equals("message")) {
					launch.setClass(context, LogInActivity.class);
					launch.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
					launch.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
				} else {
					if (ChatActivity.mChatActivityContext != null) {
						// ChatActivity.finishMe();
						// Intent chatIntent = new Intent(context,
						// ChatActivity.class);
						// chatIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
						ChatActivity.szJobID = jobID;
						intent.setAction("NewMessageFromOtherDriver");
						LocalBroadcastManager.getInstance(context)
								.sendBroadcast(intent);
						// chatIntent.putExtra(Constants.JOB_ID, jobID);
						// context.startActivity(chatIntent);
						return;
					}
					Log.e("IntentReceiver", "PUH OPENED redirect to MAIN");
					launch.setClass(context, MainActivity.class);
					launch.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
					launch.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
					launch.putExtra(Constants.JOB_ID, jobID);
					if (Util.mContext == null)
						launch.putExtra("appislaunchingfresh", true);

					if (messageType.equals("messagetodriver")) {
						launch.putExtra("isChatMessage", true);
					} else {
						AppValues.clearAllJobsList();
						launch.putExtra("isChatMessage", false);
					}
				}
				context.startActivity(launch);
			}

		} else if (action.equals(PushManager.ACTION_REGISTRATION_FINISHED)) {

			Log.i(logTag,
					"Registration complete. APID:"
							+ intent.getStringExtra(PushManager.EXTRA_APID)
							+ ". Valid: "
							+ intent.getBooleanExtra(
									PushManager.EXTRA_REGISTRATION_VALID, false));
		} else if (action.equals(GCMMessageHandler.ACTION_GCM_DELETED_MESSAGES)) {
			Log.i(logTag,
					"The GCM service deleted "
							+ intent.getStringExtra(GCMMessageHandler.EXTRA_GCM_TOTAL_DELETED)
							+ " messages.");
		}

		// Notify any app-specific listeners using the local broadcast receiver
		// to avoid
		// leaking any sensitive information. This sends out all push and
		// location intents
		// to the rest of the application.
		LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
	}

	/**
	 * Log the values sent in the payload's "extra" dictionary.
	 * 
	 * @param intent
	 *            A PushManager.ACTION_NOTIFICATION_OPENED or
	 *            ACTION_PUSH_RECEIVED intent.
	 */
	private void logPushExtras(Intent intent) {
		Set<String> keys = intent.getExtras().keySet();
		for (String key : keys) {

			// ignore standard C2DM extra keys
			List<String> ignoredKeys = (List<String>) Arrays.asList(
					"collapse_key",// c2dm collapse key
					"from",// c2dm sender
					PushManager.EXTRA_NOTIFICATION_ID,// int id of generated
														// notification
														// (ACTION_PUSH_RECEIVED
														// only)
					PushManager.EXTRA_PUSH_ID,// internal UA push id
					PushManager.EXTRA_ALERT);// ignore alert
			if (ignoredKeys.contains(key)) {
				continue;
			}
			Log.i(logTag,
					"Push Notification Extra: [" + key + " : "
							+ intent.getStringExtra(key) + "]");
		}
	}
}