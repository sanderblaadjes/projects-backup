package co.uk.pocketapp.gmd.ui;

import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import co.uk.pocketapp.gmd.GMDApplication;
import co.uk.pocketapp.gmd.R;
import co.uk.pocketapp.gmd.db.DataProvider;
import co.uk.pocketapp.gmd.util.AES;
import co.uk.pocketapp.gmd.util.AppValues;
import co.uk.pocketapp.gmd.util.HttpConnect;
import co.uk.pocketapp.gmd.util.ResponseParser;
import co.uk.pocketapp.gmd.util.Util;
import co.uk.pocketapp.gmd.util.XML_Creation;
import co.uk.pocketapp.gmd.util.XML_Values;

public class Summary extends ParentActivity {
    private static final String TAG = "Summary";

    static boolean m_bIsParsed = false;

    Button save_Button;
    TextView page_Title_TextView;

    TextView main_Difficulties_Text;
    TextView textview_recommendations_header, textview_recommendations;
    TextView point_Of_General_Interest_Text;
    // TextView site_Storage_Conditions_Text;
    // TextView spare_Part_At_Sites_Text;
    // TextView tools_Instruments_Text;

    EditText summary_of_Inspection_edittext_1;
    EditText main_Difficulties_1;
    // EditText recommendations_edittext_1;
    EditText point_Of_General_Interest_1;
    Button btn_add_summary_of_inspection;
    Button btn_add_main_difficulties;
    // Button btn_add_recommondations;
    Button btn_add_general_interest;

    EditText summary_of_inspection_edittext;

    int count_rows_SOI = 0;
    String count_Summary_Of_Inspection = "";
    View view_SOI;
    EditText summary_of_Inspection_Text;
    LinearLayout ll_Summary_Of_Inspection;
    int childcount_SOI = 0;

    String count_Main_Difficulties = "";
    View view_MD;
    EditText main_Difficulties_EditText;
    int childcount_MD = 0;

    String count_Recomm = "";
    View view_Recom;
    EditText recommendation_EditText;
    int childcount_Recomm = 0;

    String count_POGI = "";
    View view_POGI;
    EditText point_of_General_Interest_EditText;
    int childcount_POGI = 0;

    // Site Storage Condition: STC
    LinearLayout linear_Site_Storage_Condition;
    View view_STC;
    EditText store_Cleanliness_EditText;
    EditText checked_EditText;
    EditText date_EditText;
    EditText remarks_EditText;

    // Spare Parts at site:SPAS
    LinearLayout linear_Spare_Parts_At_Site;
    View view_SPAS;
    // Spinner list_Of_Material_Spinner;
    // private ArrayAdapter<CharSequence> list_Of_Material_Spinner_Adapter;
    EditText material_EditText_SPAS;
    EditText checked_EditText_SPAS;
    EditText date_EditText_SPAS;
    EditText remarks_EditText_SPAS;

    // Tools and instruments:TNI
    LinearLayout linear_Tools_and_Instruments;
    View view_TNI;
    // Spinner list_of_Tools_Spinner;
    // private ArrayAdapter<CharSequence> list_Of_Tools_Spinner_Adapter;
    EditText tools_Edittext_TNI;
    EditText checked_EditText_TNI;
    EditText date_EditText_TNI;
    EditText remarks_EditText_TNI;

    // To apply font:
    TextView GMD_heading_TextView;
    // TextView heading_Textview;

    TextView tv_Service_Info_heading, tv_Mian_Motor_Data_Heading, tv_Specific_Motor_data_Heading;
    Button bnt_add_summary_of_inspection, btn_add_main_difficult,
            btn_add_recommdation, btn_add_point_of_general_interest ,btn_add_Service_Info;
    //btn_add_main_motor_data, btn_add_Specific_Motor_Data;
    LinearLayout ll_Summary_Of_Inspection_Add, ll_Main_Dfficulties_Add,
            ll_point_of_general_interest_Add, ll_Service_Information_add, ll_Main_Motor_Data_Add, ll_Specific_Motor_Data;

    EditText et_N_Service_info1, et_Surname_Service_Info1, et_From_Service_Info1, et_till_Service_Info1;
    String count_SI="";
    //  et_N_Main_Motors_Data1, et_Desc_Main_Motor_Data1, et_Data_Main_Motor_Data1, et_Remarks_Main_Motor_Data1,
           // et_N_Specific_Motor_Data1, et_Desc_Specific_Motor_Data1, et_Data_Specific_Motor_Data1, et_Remarks_Specific_Motor_Data1;

    // ll_Recommendation_Add
    Context context;

    // To apply font:
    TextView textview_summary_of_inspection_header;
    // textview_summary_of_inspection_autogenerated;

    HashMap<String, String> xmlData;

    HashMap<String, String> xmlData_ToSave = new HashMap<String, String>();

    ProgressBar progressSummaryDetails;

    StringBuffer recommendationsBuffer;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.summary);
        context = Summary.this;

        // // Calling Site Storage Condition layout function:
        // layout_Site_Storage_condition_function(2);
        // // Calling pare Parts At site layout function:
        // layout_Spare_Parts_At_Sites_function(2);
        // // Calling tools and instruments layout function:
        // layout_Tools_And_Instruments_function(2);
    }

    // Adding layout SUMMARY OF INSPECTION::
    private void layout_summary_of_inspection_function(int rows) {

        // TODO Auto-generated method stub
        Log.d("layout_summary_of_inspection_function()", " COUNT :: " + rows);
        int count = rows;
        if (count >= 1) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_SOI = inflater.inflate(R.layout.row_single_summary, null);
                summary_of_Inspection_Text = (EditText) view_SOI
                        .findViewById(R.id.summary_of_inspection_edittext);
                summary_of_Inspection_Text.setHintTextColor(getResources()
                        .getColor(R.color.hint_text_color));

                summary_of_Inspection_Text.setText(DecodeXML(xmlData
                        .get(XML_Values.SUMMARY_OF_INSPECTION + i)));
                ll_Summary_Of_Inspection_Add.removeView(view_SOI);
                ll_Summary_Of_Inspection_Add.addView(view_SOI);

                if (i == rows) {
                    ll_Summary_Of_Inspection_Add.removeView(view_SOI);
                    ll_Summary_Of_Inspection_Add.addView(view_SOI);
                }

                // Putting LIST OF DISTRIBUTION data in hashMap (report_Details)
                // for passing in XML_Serializer Class
                // report_Details.put("rows_LOD", "" + rows);
                // report_Details.put(XML_Values.LOCATION + i, location_Text
                // .getText().toString());
            }
        }// Add new list view

    }

    // Adding layout MAIN DIFFICULTIEs::
    private void layout_main_difficulties_function(int rows) {

        // TODO Auto-generated method stub
        Log.d("layout_main_difficulties_function()", " COUNT :: " + rows);
        int count = rows;
        if (count >= 1) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_MD = inflater.inflate(R.layout.row_single_summary, null);
                main_Difficulties_EditText = (EditText) view_MD
                        .findViewById(R.id.summary_of_inspection_edittext);
                main_Difficulties_EditText.setHintTextColor(getResources()
                        .getColor(R.color.hint_text_color));

                main_Difficulties_EditText.setText(DecodeXML(xmlData
                        .get(XML_Values.MAIN_DIFFICULTIES + i)));
                ll_Main_Dfficulties_Add.removeView(view_MD);
                ll_Main_Dfficulties_Add.addView(view_MD);

                if (i == rows) {
                    ll_Main_Dfficulties_Add.removeView(view_MD);
                    ll_Main_Dfficulties_Add.addView(view_MD);
                }
            }
        }// Add new list view

    }

    // Adding layout RECOMMANDATIONS::
    // private void layout_recommandations_function(int rows) {
    //
    // // TODO Auto-generated method stub
    // Log.d("layout_recommandations_function()", " COUNT :: " + rows);
    // int count = rows;
    // if (count >= 1) {
    // for (int i = 1; i <= count; i++) { // count +1
    // LayoutInflater inflater = LayoutInflater
    // .from(getApplicationContext());
    // view_Recom = inflater
    // .inflate(R.layout.row_single_summary, null);
    // recommandation_EditText = (EditText) view_Recom
    // .findViewById(R.id.summary_of_inspection_edittext);
    // recommandation_EditText.setHintTextColor(getResources()
    // .getColor(R.color.hint_text_color));
    //
    // recommandation_EditText.setText(DecodeXML(xmlData
    // .get(XML_Values.RECOMMENDATIONS + i)));
    // ll_Recommendation_Add.removeView(view_Recom);
    // ll_Recommendation_Add.addView(view_Recom);
    //
    // if (i == rows) {
    // ll_Recommendation_Add.removeView(view_Recom);
    // ll_Recommendation_Add.addView(view_Recom);
    // }
    // }
    // }// Add new list view
    //
    // }

    // Adding layout POINT OF GENERAL INTEREST::
    private void layout_point_of_General_interest_function(int rows) {

        // TODO Auto-generated method stub
        Log.d("layout_point_of_General_interest_function()", " COUNT :: "
                + rows);
        int count = rows;
        if (count >= 1) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_POGI = inflater.inflate(R.layout.row_single_summary, null);
                point_of_General_Interest_EditText = (EditText) view_POGI
                        .findViewById(R.id.summary_of_inspection_edittext);
                point_of_General_Interest_EditText
                        .setHintTextColor(getResources().getColor(
                                R.color.hint_text_color));

                point_of_General_Interest_EditText.setText(DecodeXML(xmlData
                        .get(XML_Values.POINT_OF_GENERAL_INTEREST + i)));
                ll_point_of_general_interest_Add.removeView(view_POGI);
                ll_point_of_general_interest_Add.addView(view_POGI);
            }
        }// Add new list view

    }

    private void show_Service_Information_function(int rows) {

       // TODO Auto-generated method stub
        Log.d("show_Service_Information_function()", " COUNT :: "
                + rows);
        int count = rows;
        if (count >= 1) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
               View view_SI = inflater.inflate(R.layout.row_service_information, null);

                EditText et_N = (EditText) view_SI
                        .findViewById(R.id.et_n_degree_service_info);
                EditText et_desc = (EditText) view_SI
                        .findViewById(R.id.et_description_service_info);
                EditText et_from = (EditText) view_SI
                        .findViewById(R.id.et_from_service_info);
                EditText et_till = (EditText) view_SI
                        .findViewById(R.id.et_till_service_info);

                et_N.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_desc.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_from.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_till.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));

                et_N.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_N +i)));
                et_desc.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_DESCRIPTION +i)));
                et_from.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_FROM +i)));
                et_till.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_TILL +i)));


                ll_Service_Information_add.removeView(view_SI);
                ll_Service_Information_add.addView(view_SI);
            }
        }// Add new list view

    }

    // Adding dynamically rows acc as given in fetch xml file for SITE STORAGE
    // CONDITION
    private void layout_Site_Storage_condition_function(int rows) {
        // TODO Auto-generated method stub
        Log.d(TAG, "" + rows);
        int count = rows;
        if (count > 0) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_STC = inflater.inflate(
                        R.layout.site_storage_conditions_simplerow, null);
                // store_Cleanliness_EditText = (EditText) view_STC
                // .findViewById(R.id.store_cleanliness_edittext);
                // checked_EditText = (EditText) view_STC
                // .findViewById(R.id.checked_edittext);
                // date_EditText = (EditText) view_STC
                // .findViewById(R.id.date_edittext);
                // remarks_EditText = (EditText) view_STC
                // .findViewById(R.id.remarks_edittext);
                //
                // // Set font color:
                // store_Cleanliness_EditText.setHintTextColor(getResources()
                // .getColor(R.color.hint_text_color));
                // checked_EditText.setHintTextColor(getResources().getColor(
                // R.color.hint_text_color));
                // date_EditText.setHintTextColor(getResources().getColor(
                // R.color.hint_text_color));
                // remarks_EditText.setHintTextColor(getResources().getColor(
                // R.color.hint_text_color));
                //
                // store_Cleanliness_EditText.setText("store");
                // checked_EditText.setText("checked");
                // date_EditText.setText("03/05/2013");
                // remarks_EditText.setText("good");
                // linear_Site_Storage_Condition.addView(view_STC);

                // Putting LIST OF DISTRIBUTION data in hashMap (report_Details)
                // for passing in XML_Serializer Class
                // report_Details.put("rows_LOD", "" + rows);
                // report_Details.put("location" + i, location_Text.getText()
                // .toString());
                // report_Details.put("dept_loc" + i,
                // dept_Loc1_EditText.getText()
                // .toString());
                // report_Details.put("surname" + i, surname_EditText.getText()
                // .toString());
                // report_Details.put("dept_loc2" + i, dept_loc2_EditText
                // .getText().toString());
            }
        }// Add new list view
    }

    // Adding dynamically rows acc as given in fetch xml file for SPARE PARTS AT
    // SITES
    private void layout_Spare_Parts_At_Sites_function(int rows) {
        // TODO Auto-generated method stub
        Log.d(TAG, "" + rows);
        int count = rows;
        if (count > 0) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_SPAS = inflater.inflate(
                        R.layout.spare_parts_at_site_simplerow, null);
                // list_Of_Material_Spinner = (Spinner) view_SPAS
                // .findViewById(R.id.list_of_material_spinner);
                material_EditText_SPAS = (EditText) view_SPAS
                        .findViewById(R.id.material_edittext_SPAS);
                // checked_EditText_SPAS = (EditText) view_SPAS
                // .findViewById(R.id.checked_edittext);
                date_EditText_SPAS = (EditText) view_SPAS
                        .findViewById(R.id.date_edittext);
                remarks_EditText_SPAS = (EditText) view_SPAS
                        .findViewById(R.id.remarks_edittext);

                // Setting font color:
                material_EditText_SPAS.setHintTextColor(getResources()
                        .getColor(R.color.hint_text_color));
                checked_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                date_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                remarks_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                // Setting LIST OF MATERIAL spinner Data:
                // list_Of_Material_Spinner_Adapter = ArrayAdapter
                // .createFromResource(this,
                // R.array.list_of_material_array,
                // R.layout.custom_spinner_item);
                // list_Of_Material_Spinner_Adapter
                // .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                // list_Of_Material_Spinner
                // .setAdapter(list_Of_Material_Spinner_Adapter);
                // list_Of_Material_Spinner
                // .setOnItemSelectedListener(new OnItemSelectedListener() {
                //
                // @Override
                // public void onItemSelected(AdapterView<?> arg0,
                // View arg1, int arg2, long arg3) {
                // // TODO Auto-generated method stub
                //
                // }
                //
                // @Override
                // public void onNothingSelected(AdapterView<?> arg0) {
                // // TODO Auto-generated method stub
                //
                // }
                // });

                // list_Of_Material_Spinner.("store");
                material_EditText_SPAS.setText(DecodeXML("material 1"));
                checked_EditText_SPAS.setText(DecodeXML("checked"));
                date_EditText_SPAS.setText(DecodeXML("03/05/2013"));
                remarks_EditText_SPAS.setText(DecodeXML("good"));
                linear_Spare_Parts_At_Site.addView(view_SPAS);

                // Putting LIST OF DISTRIBUTION data in hashMap (report_Details)
                // for passing in XML_Serializer Class
                // report_Details.put("rows_LOD", "" + rows);
                // report_Details.put("location" + i, location_Text.getText()
                // .toString());
                // report_Details.put("dept_loc" + i,
                // dept_Loc1_EditText.getText()
                // .toString());
                // report_Details.put("surname" + i, surname_EditText.getText()
                // .toString());
                // report_Details.put("dept_loc2" + i, dept_loc2_EditText
                // .getText().toString());
            }
        }// Add new list view
    }

    // Adding dynamically rows acc as given in fetch xml file for TOOLS AND
    // INSTRUMENTS
    private void layout_Tools_And_Instruments_function(int rows) {
        // TODO Auto-generated method stub
        Log.d(TAG, "" + rows);
        int count = rows;
        if (count > 0) {
            for (int i = 1; i <= count; i++) { // count +1
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                view_TNI = inflater.inflate(
                        R.layout.tools_instruments_simplerow, null);
                // list_of_Tools_Spinner = (Spinner) view_TNI
                // .findViewById(R.id.list_of_tools_spinner);
                tools_Edittext_TNI = (EditText) view_TNI
                        .findViewById(R.id.tools_edittext_TNI);
                // checked_EditText_TNI = (EditText) view_TNI
                // .findViewById(R.id.checked_edittext);
                date_EditText_TNI = (EditText) view_TNI
                        .findViewById(R.id.date_edittext);
                remarks_EditText_TNI = (EditText) view_TNI
                        .findViewById(R.id.remarks_edittext);

                // Setting font color:
                tools_Edittext_TNI.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                checked_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                date_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                remarks_EditText_SPAS.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                // Setting LIST OF TOOLS spinner Data:
                // list_Of_Tools_Spinner_Adapter = ArrayAdapter
                // .createFromResource(getBaseContext(), R.array.tools_array,
                // R.layout.custom_spinner_item_for_tools);
                // Log.v(TAG, "TOOLS OF SPINNER COUNT"
                // + list_Of_Tools_Spinner_Adapter.getCount());
                // list_Of_Tools_Spinner_Adapter
                // .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                //
                // list_of_Tools_Spinner.setAdapter(list_Of_Tools_Spinner_Adapter);
                // list_of_Tools_Spinner
                // .setOnItemSelectedListener(new OnItemSelectedListener() {
                //
                // @Override
                // public void onItemSelected(AdapterView<?> arg0,
                // View arg1, int arg2, long arg3) {
                // // TODO Auto-generated method stub
                //
                // }
                //
                // @Override
                // public void onNothingSelected(AdapterView<?> arg0) {
                // // TODO Auto-generated method stub
                //
                // }
                // });

                // list_of_Tools_Spinner.setTag("Tools");
                tools_Edittext_TNI.setText(DecodeXML("Tool 1"));
                checked_EditText_TNI.setText(DecodeXML("checked"));
                date_EditText_TNI.setText(DecodeXML("03/05/2013"));
                remarks_EditText_TNI.setText(DecodeXML("good"));
                linear_Tools_and_Instruments.addView(view_TNI);

                // Putting LIST OF DISTRIBUTION data in hashMap (report_Details)
                // for passing in XML_Serializer Class
                // report_Details.put("rows_LOD", "" + rows);
                // report_Details.put("location" + i, location_Text.getText()
                // .toString());
                // report_Details.put("dept_loc" + i,
                // dept_Loc1_EditText.getText()
                // .toString());
                // report_Details.put("surname" + i, surname_EditText.getText()
                // .toString());
                // report_Details.put("dept_loc2" + i, dept_loc2_EditText
                // .getText().toString());
            }
        }// Add new list view
    }

    @Override
    protected void onResume() {
        // TODO Auto-generated method stub
        super.onResume();
        super.initWidgets();

        bnt_add_summary_of_inspection = (Button) findViewById(R.id.btn_add_summary_of_inspection);
        btn_add_main_difficult = (Button) findViewById(R.id.btn_add_main_difficulties);
        // btn_add_recommdation = (Button)
        // findViewById(R.id.btn_add_recommendations);
        btn_add_point_of_general_interest = (Button) findViewById(R.id.btn_add_general_interest);
        // ll_Summary_Of_Inspection = (LinearLayout)
        // findViewById(R.id.ll_summary_of_inspection);
        ll_Summary_Of_Inspection_Add = (LinearLayout) findViewById(R.id.ll_summary_add);
        ll_Main_Dfficulties_Add = (LinearLayout) findViewById(R.id.ll_main_difficulties_add);
        // ll_Recommendation_Add = (LinearLayout)
        // findViewById(R.id.ll_recomm_add);
        ll_point_of_general_interest_Add = (LinearLayout) findViewById(R.id.ll_point_of_general_interest_add);

        if (((LinearLayout) ll_Summary_Of_Inspection_Add).getChildCount() > 0)
            ((LinearLayout) ll_Summary_Of_Inspection_Add).removeAllViews();

        if (((LinearLayout) ll_Main_Dfficulties_Add).getChildCount() > 0)
            ((LinearLayout) ll_Main_Dfficulties_Add).removeAllViews();

        // if (((LinearLayout) ll_Recommendation_Add).getChildCount() > 0)
        // ((LinearLayout) ll_Recommendation_Add).removeAllViews();

        if (((LinearLayout) ll_point_of_general_interest_Add).getChildCount() > 0)
            ((LinearLayout) ll_point_of_general_interest_Add).removeAllViews();

        linear_Site_Storage_Condition = (LinearLayout) findViewById(R.id.ll_site_storage_conditions);
        linear_Spare_Parts_At_Site = (LinearLayout) findViewById(R.id.ll_spare_parts_at_site);
        linear_Tools_and_Instruments = (LinearLayout) findViewById(R.id.ll_tools_instruments);

        ll_Service_Information_add = (LinearLayout) findViewById(R.id.ll_service_information_add);
        if (((LinearLayout) ll_Service_Information_add).getChildCount() > 0)
            ((LinearLayout) ll_Service_Information_add).removeAllViews();
        btn_add_Service_Info = (Button) findViewById(R.id.btn_servide_information);
        et_N_Service_info1 = (EditText) findViewById(R.id.et_n_degree_service_info);
        et_Surname_Service_Info1 = (EditText) findViewById(R.id.et_description_service_info);
        et_From_Service_Info1 = (EditText) findViewById(R.id.et_from_service_info);
        et_till_Service_Info1 = (EditText) findViewById(R.id.et_till_service_info);
        et_N_Service_info1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));
        et_Surname_Service_Info1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));
        et_From_Service_Info1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));
        et_till_Service_Info1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));


        //Main motor data
        ll_Main_Motor_Data_Add = (LinearLayout) findViewById(R.id.ll_main_motor_data_add);
        if (((LinearLayout) ll_Main_Motor_Data_Add).getChildCount() > 0)
            ((LinearLayout) ll_Main_Motor_Data_Add).removeAllViews();
        //btn_add_main_motor_data = (Button) findViewById(R.id.btn_main_motor_data);
//        et_N_Main_Motors_Data1 = (EditText) findViewById(R.id.et_n_degree_main_motor_data);
//        et_Desc_Main_Motor_Data1 = (EditText) findViewById(R.id.et_description_main_motor_data);
//        et_Data_Main_Motor_Data1 = (EditText) findViewById(R.id.et_data_main_motor_data);
//        et_Remarks_Main_Motor_Data1 = (EditText) findViewById(R.id.et_remarks_main_motor_data);
//        et_N_Main_Motors_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Desc_Main_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Data_Main_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Remarks_Main_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));

        //Secific motor data
        ll_Specific_Motor_Data = (LinearLayout) findViewById(R.id.ll_specific_motor_data_add);
        if (((LinearLayout) ll_Specific_Motor_Data).getChildCount() > 0)
            ((LinearLayout) ll_Specific_Motor_Data).removeAllViews();
       // btn_add_Specific_Motor_Data = (Button) findViewById(R.id.btn_specific_motor_data);
//        et_N_Specific_Motor_Data1 = (EditText) findViewById(R.id.et_n_degree_specific_motor_data);
//        et_Desc_Specific_Motor_Data1 = (EditText) findViewById(R.id.et_description_specific_motor_data);
//        et_Data_Specific_Motor_Data1 = (EditText) findViewById(R.id.et_data_specific_motor_data);
//        et_Remarks_Specific_Motor_Data1 = (EditText) findViewById(R.id.et_remarks_specific_motor_data);
//        et_N_Specific_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Desc_Specific_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Data_Specific_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));
//        et_Remarks_Specific_Motor_Data1.setHintTextColor(getResources().getColor(
//                R.color.hint_text_color));

        // font implementation of page heading: textview
        page_Title_TextView = (TextView) findViewById(R.id.pageTitle);
        page_Title_TextView.setTypeface(GMDApplication.fontText);
        // Page title :Set page Heading
        page_Title_TextView.setText("Summary");

        progressSummaryDetails = (ProgressBar) findViewById(R.id.progress_summaryDetails);
        progressSummaryDetails.setVisibility(View.VISIBLE);

        new populateValuesTask().execute();
        new populateRecommendationsTask().execute();

        // font implementation of main heading "GMD": textview
        GMD_heading_TextView = (TextView) findViewById(R.id.Heading);
        GMD_heading_TextView.setTypeface(GMDApplication.fontHeading);

        // // font implementation of middle text heading: textview
        // heading_Textview = (TextView) findViewById(R.id.heading_text);
        // heading_Textview.setTypeface(font1);

        // Apply Font types
        textview_summary_of_inspection_header = (TextView) findViewById(R.id.textview_summary_of_inspection_header);
        textview_summary_of_inspection_header
                .setTypeface(GMDApplication.fontHeading);
        // textview_summary_of_inspection_header.setTextColor(getResources()
        // .getColor(R.color.hint_text_color));

        // textview_summary_of_inspection_autogenerated = (TextView)
        // findViewById(R.id.textview_summary_of_inspection_autogenerated);

        // textview_summary_of_inspection_autogenerated
        // .setTextColor(getResources().getColor(R.color.hint_text_color));

        main_Difficulties_Text = (TextView) findViewById(R.id.main_difficulties_text);
        main_Difficulties_Text.setTypeface(GMDApplication.fontHeading);

        textview_recommendations_header = (TextView) findViewById(R.id.textview_recommendations_header);
        textview_recommendations_header.setTypeface(GMDApplication.fontHeading);

        point_Of_General_Interest_Text = (TextView) findViewById(R.id.point_of_general_interest_text);
        point_Of_General_Interest_Text.setTypeface(GMDApplication.fontHeading);

        tv_Service_Info_heading = (TextView) findViewById(R.id.service_information_text);
        tv_Service_Info_heading.setTypeface(GMDApplication.fontHeading);

        tv_Mian_Motor_Data_Heading = (TextView) findViewById(R.id.main_motor_data_text);
        tv_Mian_Motor_Data_Heading.setTypeface(GMDApplication.fontHeading);

        tv_Specific_Motor_data_Heading = (TextView) findViewById(R.id.specific_motor_data_text);
        tv_Specific_Motor_data_Heading.setTypeface(GMDApplication.fontHeading);
        // site_Storage_Conditions_Text = (TextView)
        // findViewById(R.id.site_storage_conditions_text);
        // site_Storage_Conditions_Text.setTypeface(GMDApplication.fontHeading);
        // spare_Part_At_Sites_Text = (TextView)
        // findViewById(R.id.spare_parts_at_site_text);
        // spare_Part_At_Sites_Text.setTypeface(GMDApplication.fontHeading);
        // tools_Instruments_Text = (TextView)
        // findViewById(R.id.tools_instruments_text);
        // tools_Instruments_Text.setTypeface(GMDApplication.fontHeading);

        save_Button = (Button) findViewById(R.id.Save_Button);

        summary_of_Inspection_edittext_1 = (EditText) findViewById(R.id.summary_of_inspection_edittext_1);
        main_Difficulties_1 = (EditText) findViewById(R.id.main_difficulties_edittext_1);
        textview_recommendations = (TextView) findViewById(R.id.textview_recommendations);
        // recommendations_edittext_1 = (EditText)
        // findViewById(R.id.recommandations_edittext_1);
        point_Of_General_Interest_1 = (EditText) findViewById(R.id.point_of_general_interest_edittext_1);
        btn_add_summary_of_inspection = (Button) findViewById(R.id.btn_add_summary_of_inspection);
        btn_add_main_difficulties = (Button) findViewById(R.id.btn_add_main_difficulties);
        // btn_add_recommondations = (Button)
        // findViewById(R.id.btn_add_recommendations);
        btn_add_general_interest = (Button) findViewById(R.id.btn_add_general_interest);

        summary_of_Inspection_edittext_1.setHintTextColor(getResources()
                .getColor(R.color.hint_text_color));
        main_Difficulties_1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));
        // recommendations_edittext_1.setHintTextColor(getResources().getColor(
        // R.color.hint_text_color));
        point_Of_General_Interest_1.setHintTextColor(getResources().getColor(
                R.color.hint_text_color));

        // Cursor cursorTasks = getContentResolver()
        // .query(DataProvider.Tasks.CONTENT_URI,
        // null,
        // DataProvider.Tasks.REPORT_ID + " ='"
        // + Util.getReportID(Summary.this) + "' AND "
        // + DataProvider.Tasks.TASK_NAME
        // + " ='Recommendations' AND "
        // + DataProvider.Tasks.TASK_CONTENT + " !=''",
        // null, null);
        // if (cursorTasks != null && cursorTasks.moveToFirst()) {
        //
        // StringBuilder sbRecommendations = new StringBuilder();
        // do {
        // // String[] szCommentArray = cursorTasks
        // // .getString(
        // // cursorTasks
        // // .getColumnIndex(DataProvider.Summary_Values.CHILD))
        // // .split(",");
        // // for (int i = 0; i < szCommentArray.length; ++i) {
        // // if (szCommentArray[i] != null
        // // && !szCommentArray[i].equals("")) {
        // // sb.append(szCommentArray[i]);
        // // if (i < szCommentArray.length)
        // // sb.append("\n");
        // // }
        // // }
        //
        // sbRecommendations.append(cursorTasks.getString(cursorTasks
        // .getColumnIndex(DataProvider.Tasks.TASK_CONTENT)));
        // sbRecommendations.append("\n");
        //
        // } while (cursorTasks.moveToNext());
        // cursorTasks.close();
        //
        // if (sbRecommendations != null
        // && !sbRecommendations.toString().equals("")) {
        // // textview_summary_of_inspection_autogenerated
        // // .setTypeface(GMDApplication.fontHeading);
        // // textview_summary_of_inspection_autogenerated.setText(sb
        // // .toString().trim());
        // // textview_recommendations
        // // .setTypeface(GMDApplication.fontHeading);
        // textview_recommendations.setText(DecodeXML(sbRecommendations
        // .toString().trim()));
        // } else {
        // textview_recommendations.setTypeface(GMDApplication.fontText);
        // textview_recommendations.setTextColor(getResources().getColor(
        // R.color.hint_text_color));
        // }
        // }
        //
        // cursorTasks = getContentResolver()
        // .query(DataProvider.Tasks.CONTENT_URI,
        // null,
        // DataProvider.Tasks.REPORT_ID + " ='"
        // + Util.getReportID(Summary.this) + "' AND "
        // + DataProvider.Tasks.TASK_NAME
        // + " ='Comments' AND "
        // + DataProvider.Tasks.TASK_CONTENT + " !=''",
        // null, null);
        // if (cursorTasks != null && cursorTasks.moveToFirst()) {
        //
        // StringBuilder sbComments = new StringBuilder();
        // do {
        //
        // sbComments.append(cursorTasks.getString(cursorTasks
        // .getColumnIndex(DataProvider.Tasks.TASK_CONTENT)));
        // sbComments.append("\n");
        //
        // } while (cursorTasks.moveToNext());
        // cursorTasks.close();
        //
        // if (sbComments != null && !sbComments.toString().equals("")) {
        // // textview_summary_of_inspection_autogenerated
        // // .setTypeface(GMDApplication.fontHeading);
        // textview_summary_of_inspection_autogenerated
        // .setText(DecodeXML(sbComments.toString().trim()));
        // } else {
        // textview_summary_of_inspection_autogenerated
        // .setTypeface(GMDApplication.fontText);
        // textview_summary_of_inspection_autogenerated
        // .setTextColor(getResources().getColor(
        // R.color.hint_text_color));
        // }
        // }

        bnt_add_summary_of_inspection
                .setOnClickListener(new View.OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        // TODO Auto-generated method stub
                        LayoutInflater inflater = LayoutInflater
                                .from(getApplicationContext());
                        View DOC_view = inflater.inflate(
                                R.layout.row_single_summary, null);

                        summary_of_inspection_edittext = (EditText) DOC_view
                                .findViewById(R.id.summary_of_inspection_edittext);
                        summary_of_inspection_edittext
                                .setHintTextColor(getResources().getColor(
                                        R.color.hint_text_color));

                        ll_Summary_Of_Inspection_Add.removeView(DOC_view);
                        ll_Summary_Of_Inspection_Add.addView(DOC_view);

                    }

                });

        btn_add_main_difficult.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                View DOC_view = inflater.inflate(R.layout.row_single_summary,
                        null);

                EditText main_difficulties_edittext = (EditText) DOC_view
                        .findViewById(R.id.summary_of_inspection_edittext);
                main_difficulties_edittext.setHintTextColor(getResources()
                        .getColor(R.color.hint_text_color));

                ll_Main_Dfficulties_Add.removeView(DOC_view);
                ll_Main_Dfficulties_Add.addView(DOC_view);

            }
        });

        // btn_add_recommdation.setOnClickListener(new View.OnClickListener() {
        //
        // @Override
        // public void onClick(View v) {
        // // TODO Auto-generated method stub
        // LayoutInflater inflater = LayoutInflater
        // .from(getApplicationContext());
        // View DOC_view = inflater.inflate(R.layout.row_single_summary,
        // null);
        //
        // EditText recomm_edittext = (EditText) DOC_view
        // .findViewById(R.id.summary_of_inspection_edittext);
        // recomm_edittext.setHintTextColor(getResources().getColor(
        // R.color.hint_text_color));
        //
        // ll_Recommendation_Add.removeView(DOC_view);
        // ll_Recommendation_Add.addView(DOC_view);
        // }
        // });

        btn_add_point_of_general_interest
                .setOnClickListener(new View.OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        // TODO Auto-generated method stub
                        LayoutInflater inflater = LayoutInflater
                                .from(getApplicationContext());
                        View DOC_view = inflater.inflate(
                                R.layout.row_single_summary, null);

                        EditText point_of_general_interest_edittext = (EditText) DOC_view
                                .findViewById(R.id.summary_of_inspection_edittext);
                        point_of_general_interest_edittext
                                .setHintTextColor(getResources().getColor(
                                        R.color.hint_text_color));

                        ll_point_of_general_interest_Add.removeView(DOC_view);
                        ll_point_of_general_interest_Add.addView(DOC_view);
                    }
                });

        btn_add_Service_Info.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                LayoutInflater inflater = LayoutInflater
                        .from(getApplicationContext());
                View Service_info_view = inflater.inflate(
                        R.layout.row_service_information, null);

                EditText et_N = (EditText) Service_info_view
                        .findViewById(R.id.et_n_degree_service_info);
                EditText et_desc = (EditText) Service_info_view
                        .findViewById(R.id.et_description_service_info);
                EditText et_from = (EditText) Service_info_view
                        .findViewById(R.id.et_from_service_info);
                EditText et_till = (EditText) Service_info_view
                        .findViewById(R.id.et_till_service_info);

                et_N.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_desc.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_from.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));
                et_till.setHintTextColor(getResources().getColor(
                        R.color.hint_text_color));

                ll_Service_Information_add.removeView(Service_info_view);
                ll_Service_Information_add.addView(Service_info_view);
            }
        });

//        btn_add_main_motor_data.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                LayoutInflater inflater = LayoutInflater
//                        .from(getApplicationContext());
//                View MMD_view = inflater.inflate(
//                        R.layout.row_main_motor_datas, null);
//
//                EditText et_N = (EditText) MMD_view
//                        .findViewById(R.id.et_n_degree_main_motor_data);
//                EditText et_desc = (EditText) MMD_view
//                        .findViewById(R.id.et_description_main_motor_data);
//                EditText et_data = (EditText) MMD_view
//                        .findViewById(R.id.et_data_main_motor_data);
//                EditText et_remarks = (EditText) MMD_view
//                        .findViewById(R.id.et_remarks_main_motor_data);
//
//                et_N.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_desc.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_data.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_remarks.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//
//                ll_Main_Motor_Data_Add.removeView(MMD_view);
//                ll_Main_Motor_Data_Add.addView(MMD_view);
//            }
//        });

//        btn_add_Specific_Motor_Data.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                LayoutInflater inflater = LayoutInflater
//                        .from(getApplicationContext());
//                View SMD_view = inflater.inflate(
//                        R.layout.row_specific_motor_data, null);
//
//                EditText et_N = (EditText) SMD_view
//                        .findViewById(R.id.et_n_degree_specific_motor_data);
//                EditText et_desc = (EditText) SMD_view
//                        .findViewById(R.id.et_description_specific_motor_data);
//                EditText et_data = (EditText) SMD_view
//                        .findViewById(R.id.et_data_specific_motor_data);
//                EditText et_remarks = (EditText) SMD_view
//                        .findViewById(R.id.et_remarks_specific_motor_data);
//
//                et_N.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_desc.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_data.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//                et_remarks.setHintTextColor(getResources().getColor(
//                        R.color.hint_text_color));
//
//                ll_Specific_Motor_Data.removeView(SMD_view);
//                ll_Specific_Motor_Data.addView(SMD_view);
//            }
//        });

        // save Button:
        save_Button.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                if (summary_of_Inspection_edittext_1.getText().length() <= 0
                        && main_Difficulties_1.getText().length() <= 0
                        // && recommendations_edittext_1.getText().length() <= 0
                        && point_Of_General_Interest_1.getText().length() <= 0) {
                    AlertDialog m_AlertDialog = new AlertDialog.Builder(
                            Summary.this)
                            .setTitle("Alert!")
                            .setMessage(
                                    "All fields are empty. No data to save.")
                            .setPositiveButton("Ok",
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(
                                                DialogInterface argDialog,
                                                int argWhich) {

                                        }
                                    }).create();
                    m_AlertDialog.setCanceledOnTouchOutside(false);
                    m_AlertDialog.show();

                } else {
                    saveAllSummaryValues(true);
                }

            }
        });

        // if (AppValues.XMLSummary.equals("")) {
        //
        // new downloadSummaryTask().execute();
        //
        // } else {
        // xmlData = new HashMap<String, String>();
        // ResponseParser parser = new ResponseParser(
        // Summary.this);
        // try {
        // xmlData = parser.parse_Summary(AppValues.XMLSummary, xmlData);
        // } catch (Exception e) {
        // e.printStackTrace();
        // }
        //
        // Log.d("*SUMMARY-onResume", "XML DATA HASH MAP ::" + xmlData.size());
        // }
    }

    // class downloadSummaryTask extends AsyncTask<Void, Void, Void> {
    //
    // @Override
    // protected Void doInBackground(Void... params) {
    // // TODO Auto-generated method stub
    //
    // xmlData = new HashMap<String, String>();
    // String szSummaryResponse = new HttpConnect()
    // .connect("http://dev.pocketapp.co.uk/dev/gmd/gmd_summary.xml");
    // AppValues.XMLSummary = szSummaryResponse;
    //
    // ResponseParser parser = new ResponseParser(Summary.this);
    // try {
    // xmlData = parser.parse_Summary(szSummaryResponse, xmlData);
    // } catch (Exception e) {
    // e.printStackTrace();
    // }
    //
    // Log.d("**SUMMARY-downloadSummaryTask", "XML DATA HASH MAP ::"
    // + xmlData.size());
    // return null;
    // }
    // }

    @Override
    public void onBackPressed() {
        // TODO Auto-generated method stub

        AlertDialog quitAlertDialog = new AlertDialog.Builder(Summary.this)
                .setTitle("Exit")
                .setMessage("Confirm exit?")
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface argDialog, int argWhich) {
                        finish();

                    }
                })
                .setNegativeButton("Cancel",
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface argDialog,
                                                int argWhich) {
                            }
                        }).create();
        quitAlertDialog.setCanceledOnTouchOutside(false);
        quitAlertDialog.show();
        return;
    }

    private void getDataFromAddedLayouts_Summary_Of_Inspection() {
        childcount_SOI = ll_Summary_Of_Inspection_Add.getChildCount();

        for (int i = 0; i < childcount_SOI; i++) {

            View DOC_view = ll_Summary_Of_Inspection_Add.getChildAt(i);
            EditText summary_of_inspection_edittext = (EditText) DOC_view
                    .findViewById(R.id.summary_of_inspection_edittext);
            summary_of_inspection_edittext.setHintTextColor(getResources()
                    .getColor(R.color.hint_text_color));
            xmlData_ToSave.put(XML_Values.SUMMARY_OF_INSPECTION + (i + 1),
                    summary_of_inspection_edittext.getText().toString());

        }
        xmlData_ToSave.put("Child_SOI", String.valueOf(childcount_SOI + 1));
    }

    private void getDataFromAddedLayouts_Main_Difficulties() {
        childcount_MD = ll_Main_Dfficulties_Add.getChildCount();

        for (int i = 0; i < childcount_MD; i++) {

            View DOC_view = ll_Main_Dfficulties_Add.getChildAt(i);

            EditText summary_of_inspection = (EditText) DOC_view
                    .findViewById(R.id.summary_of_inspection_edittext);
            summary_of_inspection.setHintTextColor(getResources().getColor(
                    R.color.hint_text_color));
            xmlData_ToSave.put(XML_Values.MAIN_DIFFICULTIES + (i + 1),
                    summary_of_inspection.getText().toString());

        }
        xmlData_ToSave.put("Child_MD", String.valueOf(childcount_MD + 1));
    }

    // private void getDataFromAddedLayouts_Recommendations() {
    // childcount_Recomm = ll_Recommendation_Add.getChildCount();
    //
    // for (int i = 0; i < childcount_Recomm; i++) {
    //
    // View DOC_view = ll_Recommendation_Add.getChildAt(i);
    //
    // EditText summary_of_inspection = (EditText) DOC_view
    // .findViewById(R.id.summary_of_inspection_edittext);
    // summary_of_inspection.setHintTextColor(getResources().getColor(
    // R.color.hint_text_color));
    // xmlData_ToSave.put(XML_Values.RECOMMENDATIONS + (i + 1),
    // summary_of_inspection.getText().toString());
    //
    // }
    // xmlData_ToSave
    // .put("Child_Recom", String.valueOf(childcount_Recomm + 1));
    // }

    private void getDataFromAddedLayouts_Point_of_General_Interest() {
        childcount_POGI = ll_point_of_general_interest_Add.getChildCount();

        for (int i = 0; i < childcount_POGI; i++) {

            View DOC_view = ll_point_of_general_interest_Add.getChildAt(i);

            EditText summary_of_inspection = (EditText) DOC_view
                    .findViewById(R.id.summary_of_inspection_edittext);
            summary_of_inspection.setHintTextColor(getResources().getColor(
                    R.color.hint_text_color));

            xmlData_ToSave.put(XML_Values.POINT_OF_GENERAL_INTEREST + (i + 1),
                    summary_of_inspection.getText().toString());

        }
        xmlData_ToSave.put("Child_POGI", String.valueOf(childcount_POGI + 1));
    }

    private void getDataFromAddedLayouts_Service_Information() {
        int count_Service_Information = ll_Service_Information_add.getChildCount();

        for (int i = 0; i < count_Service_Information; i++) {

            View SI_view = ll_Service_Information_add.getChildAt(i);

            EditText et_N = (EditText) SI_view
                    .findViewById(R.id.et_n_degree_service_info);

            EditText et_desc = (EditText) SI_view
                    .findViewById(R.id.et_description_service_info);
            EditText et_from = (EditText) SI_view
                    .findViewById(R.id.et_from_service_info);
            EditText et_till = (EditText) SI_view
                    .findViewById(R.id.et_till_service_info);

            xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_N + (i + 1),
                    et_N.getText().toString());
            xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_DESCRIPTION + (i + 1),
                    et_desc.getText().toString());
            xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_FROM + (i + 1),
                    et_from.getText().toString());
            xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_TILL + (i + 1),
                    et_till.getText().toString());

            Log.v("et_N  , et_desc, et_from ,et_till SERVICE INFORMATION::  ", "" + et_N.getText().toString() + "   "
                    + et_desc.getText().toString() + "   " + et_from.getText().toString() +
                    "   " + et_till.getText().toString());
        }

        xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_COUNT, String.valueOf(count_Service_Information + 1));
    }

//    private void getDataFromAddedLayouts_Main_Motor_Data() {
//        int count_Main_Motor_Data = ll_Main_Motor_Data_Add.getChildCount();
//
//        for (int i = 0; i < count_Main_Motor_Data; i++) {
//
//            View MMD_view = ll_Main_Motor_Data_Add.getChildAt(i);
//
//            EditText et_N_MMD = (EditText) MMD_view
//                    .findViewById(R.id.et_n_degree_main_motor_data);
//            EditText et_desc_MMD = (EditText) MMD_view
//                    .findViewById(R.id.et_description_main_motor_data);
//            EditText et_data_MMD = (EditText) MMD_view
//                    .findViewById(R.id.et_data_main_motor_data);
//            EditText et_remarks_MMD = (EditText) MMD_view
//                    .findViewById(R.id.et_remarks_main_motor_data);
//
//            xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_N + (i + 1),
//                    et_N_MMD.getText().toString());
//            xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_DESCRIPTION + (i + 1),
//                    et_desc_MMD.getText().toString());
//            xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_DATA + (i + 1),
//                    et_data_MMD.getText().toString());
//            xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_REMARKS + (i + 1),
//                    et_remarks_MMD.getText().toString());
//
//            Log.v("et_N ,et_desc, et_data, et_remarks  MAIN MOTOR DATAA::   ",""+et_N_MMD.getText().toString()+"  "+
//                    et_desc_MMD.getText().toString()+"  "+ et_data_MMD.getText().toString()+
//            "  "+et_remarks_MMD.getText().toString());
//        }
//        xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_COUNT, String.valueOf(count_Main_Motor_Data + 1));
//    }
//
//    private void getDataFromAddedLayouts_Specific_Motor_Data() {
//        int count_Specific_Motor_Data = ll_Specific_Motor_Data.getChildCount();
//
//        for (int i = 0; i < count_Specific_Motor_Data; i++) {
//
//            View View_SMD = ll_Specific_Motor_Data.getChildAt(i);
//
//            EditText et_N = (EditText) View_SMD
//                    .findViewById(R.id.et_n_degree_specific_motor_data);
//            EditText et_desc = (EditText) View_SMD
//                    .findViewById(R.id.et_description_specific_motor_data);
//            EditText et_data = (EditText) View_SMD
//                    .findViewById(R.id.et_data_specific_motor_data);
//            EditText et_remarks = (EditText) View_SMD
//                    .findViewById(R.id.et_remarks_specific_motor_data);
//
//            xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_N + (i + 1),
//                    et_N.getText().toString());
//            xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_DESCRIPTION + (i + 1),
//                    et_desc.getText().toString());
//            xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_DATA + (i + 1),
//                    et_data.getText().toString());
//            xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_REMARKS + (i + 1),
//                    et_remarks.getText().toString());
//
//            Log.v("et_N ,et_desc, et_data, et_remarks  SPECIFIC MOTOR DATA::  ",""+et_N.getText().toString()+"  "+
//                    et_desc.getText().toString()+"  "+ et_data.getText().toString()+
//                    "  "+et_remarks.getText().toString());
//        }
//        xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_COUNT, String.valueOf(count_Specific_Motor_Data + 1));
//    }

    @Override
    protected void onPause() {
        // TODO Auto-generated method stub
        super.onPause();

        progressSummaryDetails.setVisibility(View.VISIBLE);
        // saveAllSummaryValues(false);
        new saveDatatask().execute();
    }

    class saveDatatask extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            // TODO Auto-generated method stub
            // Calling parser function:
            saveAllSummaryValues(false);
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            // TODO Auto-generated method stub
            super.onPostExecute(result);

            if (progressSummaryDetails != null)
                progressSummaryDetails.setVisibility(View.GONE);
        }
    }

    void saveAllSummaryValues(boolean showSaveDialog) {

        // Sending data to XML_Creation for writing in xml
        // Summary of Inspection:
        xmlData_ToSave.put(XML_Values.SUMMARY_OF_INSPECTION + "0",
                summary_of_Inspection_edittext_1.getText().toString());
        getDataFromAddedLayouts_Summary_Of_Inspection();
        // Main Difficulties:
        xmlData_ToSave.put(XML_Values.MAIN_DIFFICULTIES + "0",
                main_Difficulties_1.getText().toString());
        getDataFromAddedLayouts_Main_Difficulties();

        // Recommendations:
        // xmlData_ToSave.put(XML_Values.RECOMMENDATIONS + "0",
        // recommendations_edittext_1.getText().toString());
        // getDataFromAddedLayouts_Recommendations();

        // Point of General Interest:
        xmlData_ToSave.put(XML_Values.POINT_OF_GENERAL_INTEREST + "0",
                point_Of_General_Interest_1.getText().toString());
        getDataFromAddedLayouts_Point_of_General_Interest();

        //Service Information
        xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_N + "0",
                et_N_Service_info1.getText().toString());
        xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_DESCRIPTION + "0",
                et_Surname_Service_Info1.getText().toString());
        xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_FROM + "0",
                et_From_Service_Info1.getText().toString());
        xmlData_ToSave.put(XML_Values.SERVICE_INFORMATION_TILL + "0",
                et_till_Service_Info1.getText().toString());

        getDataFromAddedLayouts_Service_Information();

        //Main Motor Data
//        xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_N + "0",
//                et_N_Main_Motors_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_DESCRIPTION + "0",
//                et_Desc_Main_Motor_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_DATA + "0",
//                et_Data_Main_Motor_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.MAIN_MOTOR_DATA_REMARKS + "0",
//                et_Remarks_Main_Motor_Data1.getText().toString());
//
//        Log.v("N,  DEscription,  Data,  Remarks  MAIN MOTOR DATA 0",""+et_N_Main_Motors_Data1.getText().toString()+"  "+
//                et_Desc_Main_Motor_Data1.getText().toString()+"   "+et_Data_Main_Motor_Data1.getText().toString()+"   "+
//                et_Remarks_Main_Motor_Data1.getText().toString());
//        getDataFromAddedLayouts_Main_Motor_Data();

        //Specific Motor Data
//        xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_N + "0",
//                et_N_Specific_Motor_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_DESCRIPTION + "0",
//                et_Desc_Specific_Motor_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_DATA + "0",
//                et_Data_Specific_Motor_Data1.getText().toString());
//        xmlData_ToSave.put(XML_Values.SPECIFIC_MOTOR_DATA_REMARKS + "0",
//                et_Remarks_Specific_Motor_Data1.getText().toString());
//
//        Log.v("N, Description, Data, Remarks  SPECIFIC MOTOR DATA::  ",""+et_N_Specific_Motor_Data1.getText().toString()+"  "+
//                et_Desc_Specific_Motor_Data1.getText().toString()+"   "+et_Data_Specific_Motor_Data1.getText().toString()+"  "+
//                et_Remarks_Specific_Motor_Data1.getText().toString());
//        getDataFromAddedLayouts_Specific_Motor_Data();


        // Writing into xml
        XML_Creation save_summary = new XML_Creation();
        save_summary.save_Summary(xmlData_ToSave);
        Log.v(TAG, "DONE WITH SAVING SUMMARY DATA AT SAME LOCATION");

        if (showSaveDialog) {
            AlertDialog m_AlertDialog = new AlertDialog.Builder(Summary.this)
                    .setTitle("Success!")
                    .setMessage("Data saved successfully!")
                    .setPositiveButton("Ok",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface argDialog,
                                                    int argWhich) {

                                }
                            }).create();
            m_AlertDialog.setCanceledOnTouchOutside(false);
            m_AlertDialog.show();
        }

        try {
            if (progressSummaryDetails != null)
                progressSummaryDetails.setVisibility(View.GONE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    class populateValuesTask extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            // TODO Auto-generated method stub
            try {
                if (AppValues.bIsEncryptionRequired)
                    Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }

            StringBuilder text = null;
            String szDecryptedText = "";
            try {

                if (AppValues.getReportXMLFile().exists()) {
                    text = new StringBuilder();
                    try {
                        BufferedReader br = new BufferedReader(new FileReader(
                                AppValues.getReportXMLFile()));
                        String line;

                        while ((line = br.readLine()) != null) {
                            text.append(line);
                            text.append('\n');
                        }
                        br.close();

                        if (AppValues.bIsEncryptionRequired) {
                            szDecryptedText = AES.aesDecrypt(text.toString(),
                                    AES.SHA256(""));
                        }
                    } catch (Exception e) {
                        // TODO: handle exception
                        e.printStackTrace();
                    }
                }
                xmlData = new HashMap<String, String>();
                ResponseParser parser = new ResponseParser(Summary.this);

                if (AppValues.bIsEncryptionRequired)
                    xmlData = parser.parse_Summary(szDecryptedText, xmlData);
                else
                    xmlData = parser.parse_Summary(text.toString(), xmlData);

                // Log.d("*Summary-onResume",
                // "Summary XML DATA HASH MAP ::" + xmlData.size());

            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            // TODO Auto-generated method stub
            super.onPostExecute(result);

            // Calling layout_summary_of_inspection_function
            // if (xmlData.containsKey(XML_Values.RECOMMENDATIONS + "0")) {
            // recommendations_edittext_1.setText(DecodeXML(xmlData
            // .get(XML_Values.RECOMMENDATIONS + "0")));
            // } else
            // recommendations_edittext_1.setText("");
            if (xmlData.containsKey(XML_Values.SUMMARY_OF_INSPECTION + "0")) {
                summary_of_Inspection_edittext_1.setText(DecodeXML(xmlData
                        .get(XML_Values.SUMMARY_OF_INSPECTION + "0")));
            } else
                summary_of_Inspection_edittext_1.setText("");
            if (xmlData.containsKey(XML_Values.POINT_OF_GENERAL_INTEREST + "0")) {
                point_Of_General_Interest_1.setText(DecodeXML(xmlData
                        .get(XML_Values.POINT_OF_GENERAL_INTEREST + "0")));
            } else
                point_Of_General_Interest_1.setText("");

            if (xmlData.containsKey(XML_Values.MAIN_DIFFICULTIES + "0")) {
                main_Difficulties_1.setText(DecodeXML(xmlData
                        .get(XML_Values.MAIN_DIFFICULTIES + "0")));
            } else
                main_Difficulties_1.setText("");

            //Setting Service Information text
            if (xmlData.containsKey(XML_Values.SERVICE_INFORMATION_N + "0")) {
                et_N_Service_info1.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_N + "0")));
            } else
                et_N_Service_info1.setText("");

            if (xmlData.containsKey(XML_Values.SERVICE_INFORMATION_DESCRIPTION + "0")) {
                et_Surname_Service_Info1.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_DESCRIPTION + "0")));
            } else
                et_Surname_Service_Info1.setText("");

            if (xmlData.containsKey(XML_Values.SERVICE_INFORMATION_FROM + "0")) {
                et_From_Service_Info1.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_FROM + "0")));
            } else
                et_From_Service_Info1.setText("");

            if (xmlData.containsKey(XML_Values.SERVICE_INFORMATION_TILL + "0")) {
                et_till_Service_Info1.setText(DecodeXML(xmlData
                        .get(XML_Values.SERVICE_INFORMATION_TILL + "0")));
            } else
                et_till_Service_Info1.setText("");

            if (xmlData.containsKey("count_items_SOI")) {

                count_Summary_Of_Inspection = xmlData.get("count_items_SOI");

                count_rows_SOI = Integer.parseInt(count_Summary_Of_Inspection);

                layout_summary_of_inspection_function(count_rows_SOI);
            }

            // Calling layout_main_difficulties_function
            if (xmlData.containsKey("count_items_MD")) {
                count_Main_Difficulties = xmlData.get("count_items_MD");
                if (count_Main_Difficulties != null) {
                    int count_rows_MD = Integer
                            .parseInt(count_Main_Difficulties);

                    layout_main_difficulties_function(count_rows_MD);
                }
            }
            // Calling layout_recommandations_function

            // if (xmlData.containsKey("count_items_Recomm")) {
            // count_Recomm = xmlData.get("count_items_Recomm");
            // if (count_Recomm != null) {
            // int count_rows_Recomm = Integer.parseInt(count_Recomm);
            // layout_recommandations_function(count_rows_Recomm);
            // }
            // }

            // /Calling layout_point_of_General_interest_function
            if (xmlData.containsKey("count_items_POGI")) {
                count_POGI = xmlData.get("count_items_POGI");
                if (count_POGI != null) {
                    int count_rows_POGI = Integer.parseInt(count_POGI);
                    layout_point_of_General_interest_function(count_rows_POGI);
                }
            }
            // /Calling show_Service_Information_function
            if (xmlData.containsKey(XML_Values.SERVICE_INFORMATION_COUNT)) {
                 count_SI = xmlData.get(XML_Values.SERVICE_INFORMATION_COUNT);
                if (count_SI != null) {
                    int count_rows_SI = Integer.parseInt(count_SI);
                    show_Service_Information_function(count_rows_SI);
                }
            }



            try {
                if (progressSummaryDetails != null)
                    progressSummaryDetails.setVisibility(View.GONE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    String DecodeXML(String szString) {
        szString = szString.replaceAll("&amp;", "&");
        szString = szString.replaceAll("&lt;", "<");
        szString = szString.replaceAll("&gt;", ">");
        szString = szString.replaceAll("&apos;", "'");
        szString = szString.replaceAll("&quot;", "\"");
        return szString;
    }

    class populateRecommendationsTask extends AsyncTask<Void, Void, Void> {

        String szRecommendationsFormmated = "%s : %s - %s - %s - %s";

        @Override
        protected Void doInBackground(Void... arg0) {
            // TODO Auto-generated method stub

            recommendationsBuffer = new StringBuffer();

            Cursor cursorMill = getContentResolver().query(
                    DataProvider.Mill.CONTENT_URI, null, null, null, null);

            if (cursorMill.moveToFirst()) {

                do {

                    String szMillName = cursorMill.getString(cursorMill
                            .getColumnIndex(DataProvider.Mill.MILL_NAME));

                    String szMillID = cursorMill.getString(cursorMill
                            .getColumnIndex(DataProvider.Mill.MILL_ID));

                    Cursor cursorServices = getContentResolver().query(
                            DataProvider.Services.CONTENT_URI,
                            null,
                            DataProvider.Services.MILL_ID + " ='" + szMillID
                                    + "'", null, null);
                    if (cursorServices.moveToFirst()) {
                        do {

                            String szParentID = cursorServices
                                    .getString(cursorServices
                                            .getColumnIndex(DataProvider.Services.PARENT_ID));
                            String szServicesFirstGenItemID = cursorServices
                                    .getString(cursorServices
                                            .getColumnIndex(DataProvider.Services.ITEM_ID));
                            String szServicesFirstGenItemName = cursorServices
                                    .getString(cursorServices
                                            .getColumnIndex(DataProvider.Services.ITEM_NAME));

                            Cursor cursorServicesSecondGen = getContentResolver()
                                    .query(DataProvider.Services.CONTENT_URI,
                                            null,
                                            DataProvider.Services.PARENT_ID
                                                    + " ='"
                                                    + szServicesFirstGenItemID
                                                    + "'", null, null);
                            if (cursorServicesSecondGen.moveToFirst()) {
                                do {
                                    String szServicesSecondGenItemID = cursorServicesSecondGen
                                            .getString(cursorServicesSecondGen
                                                    .getColumnIndex(DataProvider.Services.ITEM_ID));

                                    String szServicesSecondGenItemName = cursorServicesSecondGen
                                            .getString(cursorServicesSecondGen
                                                    .getColumnIndex(DataProvider.Services.ITEM_NAME));

                                    Cursor cursorServicesThirdGen = getContentResolver()
                                            .query(DataProvider.Services.CONTENT_URI,
                                                    null,
                                                    DataProvider.Services.PARENT_ID
                                                            + " ='"
                                                            + szServicesSecondGenItemID
                                                            + "'", null, null);

                                    if (cursorServicesThirdGen.moveToFirst()) {
                                        do {

                                            String szServicesThirdGenItemID = cursorServicesThirdGen
                                                    .getString(cursorServicesThirdGen
                                                            .getColumnIndex(DataProvider.Services.ITEM_ID));

                                            String szServicesThirdGenItemName = cursorServicesThirdGen
                                                    .getString(cursorServicesThirdGen
                                                            .getColumnIndex(DataProvider.Services.ITEM_NAME));

                                            Cursor cursorTasks = getContentResolver()
                                                    .query(DataProvider.Tasks.CONTENT_URI,
                                                            null,
                                                            DataProvider.Tasks.SERVICES_ITEM_ID
                                                                    + " ='"
                                                                    + szServicesThirdGenItemID
                                                                    + "' AND "
                                                                    + DataProvider.Tasks.TASK_NAME
                                                                    + " ='Recommendations'",
                                                            null, null);
                                            if (cursorTasks.moveToFirst()) {
                                                String szRecommendation = cursorTasks
                                                        .getString(cursorTasks
                                                                .getColumnIndex(DataProvider.Tasks.TASK_CONTENT));
                                                if (szRecommendation != null
                                                        && !szRecommendation
                                                        .equals("")) {

                                                    recommendationsBuffer
                                                            .append(szRecommendationsFormmated
                                                                    .format(szRecommendationsFormmated,
                                                                            szMillName,
                                                                            szServicesFirstGenItemName,
                                                                            szServicesSecondGenItemName,
                                                                            szServicesThirdGenItemName,
                                                                            szRecommendation));
                                                    recommendationsBuffer
                                                            .append('\n');
                                                    recommendationsBuffer
                                                            .append('\n');
                                                }
                                                cursorTasks.close();
                                            }

                                        } while (cursorServicesThirdGen
                                                .moveToNext());
                                        cursorServicesThirdGen.close();
                                    }

                                } while (cursorServicesSecondGen.moveToNext());
                                cursorServicesSecondGen.close();
                            }

                        } while (cursorServices.moveToNext());
                        cursorServices.close();
                    }

                } while (cursorMill.moveToNext());

                cursorMill.close();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            // TODO Auto-generated method stub
            super.onPostExecute(result);
            textview_recommendations.setText(recommendationsBuffer.toString()
                    .trim());
        }
    }

}
