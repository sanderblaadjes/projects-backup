package co.uk.android.lldc;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.widget.Toast;
import co.uk.android.lldc.models.DashboardModel;
import co.uk.android.lldc.service.LLDC_Sync_Servcie;

import com.crashlytics.android.Crashlytics;



public class SplashScreen extends Activity implements LocationListener {

	public static Handler mHandler = null;

	LocationManager locationManager;
	String provider;

	@SuppressLint("HandlerLeak")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		Crashlytics.start(this);
		setContentView(R.layout.activity_splash);

		LLDCApplication.init(getApplicationContext());

		// your coords of course
		LLDCApplication.parkCenter.setLatitude(18.93497658);
		LLDCApplication.parkCenter.setLongitude(72.83402252);
		// onInitiateApplication();
		mHandler = new Handler() {
			public void handleMessage(android.os.Message msg) {
				// TODO Auto-generated method stub
				super.handleMessage(msg);

				if (msg.what == 1002) {
					onInitiateApplication();
				} else {
					Intent msgIntent = new Intent(SplashScreen.this,
							HomeActivity.class);
					startActivity(msgIntent);
					finish();
				}

			};
		};

		if (LLDCApplication.isConnectingToInternet(getApplicationContext())) {
			onInitiateApplication();
		} else {
			LLDCApplication.onShowToastMesssage(getApplicationContext(),
					"Please check your internet connection...");
			onCheckDataPresent();
		}

		// Getting LocationManager object
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

		// Creating an empty criteria object
		Criteria criteria = new Criteria();

		// Getting the name of the provider that meets the criteria
		provider = locationManager.getBestProvider(criteria, false);

		if (provider != null && !provider.equals("")) {

			// Get the location from the given provider
			Location location = locationManager.getLastKnownLocation(provider);

			locationManager.requestLocationUpdates(provider, 20, 1, this);

			if (location != null)
				onLocationChanged(location);
			else
				Toast.makeText(getBaseContext(), "Location can't be retrieved",
						Toast.LENGTH_SHORT).show();

		}

	}

	@Override
	public void onLocationChanged(Location arg0) {
		// TODO Auto-generated method stub
//		float[] results = new float[1];
		float distance = arg0.distanceTo(LLDCApplication.parkCenter);
//		Location.distanceBetween(LLDCApplication.parkCenter.getLatitude(),
//				LLDCApplication.parkCenter.getLongitude(), arg0.getLatitude(),
//				arg0.getLongitude(), results);

		distance = distance/1000;
		
		if (distance > 100) {
			LLDCApplication.isInsideThePark = false;
		} else {
			LLDCApplication.isInsideThePark = true;
		}
	}
	
	public void onCheckDataPresent(){
		DashboardModel dashboardmodel = LLDCApplication.DBHelper.onGetDashBoardData();
		if(!dashboardmodel.getWelcomeMsgIn().equals("")){
			mHandler.sendEmptyMessageDelayed(1003, LLDCApplication.SPLASH_TIME_OUT);
		}
	}

	public void onInitiateApplication() {
		try {
			Intent msgIntent = new Intent(this, LLDC_Sync_Servcie.class);
			startService(msgIntent);
			mHandler.sendEmptyMessageDelayed(1003, LLDCApplication.SPLASH_TIME_OUT);
		} catch (Exception e) {
			// TODO: handle exception
			LLDCApplication.onShowLogCat("SplashActivity",
					"onInitiateApplication exception is " + e.toString());
		}
	}

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		//super.onBackPressed();
	}

}
