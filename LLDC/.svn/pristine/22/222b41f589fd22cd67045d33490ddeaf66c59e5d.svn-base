package co.uk.android.lldc.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.IntentService;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import co.uk.android.lldc.HomeActivity;
import co.uk.android.lldc.LLDCApplication;
import co.uk.android.lldc.models.DashboardModel;
import co.uk.android.lldc.models.MediaModel;
import co.uk.android.lldc.models.ServerModel;

public class LLDC_Sync_Servcie extends IntentService {

	public LLDC_Sync_Servcie() {
		super("LLDC_Sync_Servcie");
	}

	Context mContext;

	@Override
	protected void onHandleIntent(Intent arg0) {
		// TODO Auto-generated method stub
		mContext = this.getApplicationContext();
		getData();
		if (HomeActivity.mHomeActivityHandler != null)
			HomeActivity.mHomeActivityHandler.sendEmptyMessage(1005);
	}

	public void getData() {
		try {

			DashboardModel model = new DashboardModel();

			// JSONObject obj = new JSONObject(loadJSONFromAsset());

			JSONObject obj = new JSONObject(
					getJSONFromUrl("http://dev.pocketapp.co.uk/dev/lldc/index.php/api/getbasedata"));

			model.setWelcomeMsgIn(obj.getString("welcomeMsg").toString().trim());
			// model.setWelcomeMsgOut(obj.getString("welcomeMsgOut").toString().trim());
			model.setWelcomeImageIn(obj.getString("welcomeImageIn").toString()
					.trim());
			model.setWelcomeImageOut(obj.getString("welcomeImageOut")
					.toString().trim());
			model.setMajorNotice(obj.getString("majorNotification").toString()
					.trim());
			model.setMinorNotice(obj.getString("minorNotification").toString()
					.trim());
			model.setTodaysDate(obj.getString("todaysDate").toString());

			String lat = obj.getString("parkLat").toString();
			String lan = obj.getString("parkLong").toString();

			LLDCApplication.parkCenter.setLatitude(Double.parseDouble(lat));
			LLDCApplication.parkCenter.setLongitude(Double.parseDouble(lan));

			ArrayList<ServerModel> eventList = parseModels(
					obj.getJSONArray("event"), LLDCApplication.EVENT);

			JSONObject jo_inside = obj.getJSONObject("boatTrails");
			LLDCApplication.boatTrails.setTitle((jo_inside.getString("title")));
			LLDCApplication.boatTrails.setDescription((jo_inside
					.getString("description")));
			LLDCApplication.boatTrails.setImageUrl((jo_inside
					.getString("image")));

			jo_inside = obj.getJSONObject("guidedTours");
			LLDCApplication.guidedTrails
					.setTitle((jo_inside.getString("title")));
			LLDCApplication.guidedTrails.setDescription((jo_inside
					.getString("description")));
			LLDCApplication.guidedTrails.setImageUrl((jo_inside
					.getString("image")));

			JSONObject m_jObject = obj.getJSONObject("explore");

			ArrayList<ServerModel> venueList = parseModels(
					m_jObject.getJSONArray("venues"), LLDCApplication.VENUE);
			ArrayList<ServerModel> facilitiesList = parseModels(
					m_jObject.getJSONArray("facilities"),
					LLDCApplication.FACILITIES);
			ArrayList<ServerModel> trailsList = parseModels(
					m_jObject.getJSONArray("trails"), LLDCApplication.TRAILS);

			// LLDCApplication.dashBoardData = model;

			if (LLDCApplication.DBHelper == null)
				LLDCApplication.init(mContext);

			LLDCApplication.DBHelper.onClearDashboadTable();
			LLDCApplication.DBHelper.onInsertDashboardData(model);

			LLDCApplication.DBHelper.onClearMediaTable();

			LLDCApplication.DBHelper.onClearEventTable();
			LLDCApplication.DBHelper.onInsertEventData(eventList);

			LLDCApplication.DBHelper.onClearVenuesTable();
			LLDCApplication.DBHelper.onInsertVenuesData(venueList);

			LLDCApplication.DBHelper.onClearFacilitiesTable();
			LLDCApplication.DBHelper.onInsertFacilitiesData(facilitiesList);

			LLDCApplication.DBHelper.onClearTrailsTable();
			LLDCApplication.DBHelper.onInsertTrailsData(trailsList);

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public ArrayList<ServerModel> parseModels(JSONArray m_jArry, int modelType) {
		ArrayList<ServerModel> eventList = new ArrayList<ServerModel>();
		try {
			for (int i = 0; i < m_jArry.length(); i++) {
				ServerModel item = new ServerModel();
				JSONObject jo_inside = m_jArry.getJSONObject(i);
				item.set_id(jo_inside.getString("id"));
				item.setName(jo_inside.getString("name"));
				item.setShortDesc(jo_inside.getString("shortDesc"));
				item.setLongDescription(jo_inside.getString("longDescription"));
				item.setVenueId(jo_inside.getString("venueId"));
				item.setVenueTitle(jo_inside.getString("venueTitle"));
				item.setLatitude(jo_inside.getString("lat"));
				item.setLongitude(jo_inside.getString("long"));
				item.setThumbImage(jo_inside.getString("thumbImage"));
				item.setLargeImage(jo_inside.getString("largeImage"));
				item.setFlag(jo_inside.getString("flag"));
				item.setIsToday(jo_inside.getString("isToday"));
				item.setStartDateTime(jo_inside.getString("startDateTime"));
				item.setEndDateTime(jo_inside.getString("endDateTime"));
				item.setActiveDays(jo_inside.getString("activeDays"));
				item.setCategory(jo_inside.getString("category"));
				item.setColor(jo_inside.getString("color"));
				item.setOrder(jo_inside.getString("order"));
				item.setModelType(modelType);
				JSONArray mMediaArray = jo_inside.getJSONArray("media");
				ArrayList<MediaModel> mediaList = new ArrayList<MediaModel>();
				for (int j = 0; j < mMediaArray.length(); j++) {
					MediaModel model2 = new MediaModel();
					model2.setImageUrl(mMediaArray.getJSONObject(j).getString(
							"imageLink"));
					mediaList.add(model2);
				}
				item.setMediaList(mediaList);
				LLDCApplication.onShowLogCat("Service", "parsed " + i);
				eventList.add(item);
			}

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return eventList;

	}

	public String loadJSONFromAsset() {
		String json = null;
		try {

			InputStream is = mContext.getAssets().open("basedata.json");

			int size = is.available();

			byte[] buffer = new byte[size];

			is.read(buffer);

			is.close();

			json = new String(buffer, "UTF-8");

		} catch (IOException ex) {
			ex.printStackTrace();
			return null;
		}
		return json;

	}

	public String getJSONFromUrl(String url) {
		// Making HTTP request

		InputStream is = null;
		String json = null;

		try {
			// defaultHttpClient
			DefaultHttpClient httpClient = new DefaultHttpClient();
			HttpGet httpGet = new HttpGet(url);
			HttpResponse httpResponse = httpClient.execute(httpGet);
			HttpEntity httpEntity = httpResponse.getEntity();
			is = httpEntity.getContent();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					is, "UTF-8"), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}
			is.close();
			json = sb.toString();
		} catch (Exception e) {
			Log.e("Buffer Error", "Error converting result " + e.toString());
		}
		// return JSON String
		return json;
	}

}
