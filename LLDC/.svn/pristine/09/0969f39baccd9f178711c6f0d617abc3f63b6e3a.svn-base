package co.uk.android.lldc.fragments;

import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.TextView;
import co.uk.android.lldc.LLDCApplication;
import co.uk.android.lldc.R;
import co.uk.android.lldc.adapters.RecommendationListingAdapter;
import co.uk.android.lldc.fragments.tablet.EventDetailsFragmentTablet;
import co.uk.android.lldc.fragments.tablet.ExploreListDetailsFragmentTablet;
import co.uk.android.lldc.fragments.tablet.VenueFragmentTablet;
import co.uk.android.lldc.models.ServerModel;
import co.uk.android.lldc.tablet.HomeActivityTablet;
import co.uk.android.lldc.utils.Constants;

public class RecommendationsListingFragment extends Fragment {
	private static final String TAG = RecommendationsListingFragment.class
			.getSimpleName();

	ArrayList<ServerModel> recommandList = new ArrayList<ServerModel>();

	GridView events_list;

	TextView list_empty_text;

	FragmentManager mFragmentManager;
	Fragment fragment = null;

	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View rootView = null;
		Log.e(TAG, "Device is Tablet...");
		getActivity().setRequestedOrientation(
				ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		rootView = inflater.inflate(
				R.layout.fragment_recommendationlisitings_tablet, container,
				false);

		((HomeActivityTablet) getActivity()).showBackButton();
		((HomeActivityTablet) getActivity()).rlBackBtn.setEnabled(true);
		((HomeActivityTablet) getActivity()).rlBackBtn
				.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						returnBackStackImmediate(getChildFragmentManager());
					}
				});

		events_list = (GridView) rootView
				.findViewById(R.id.recommendations_list);
		list_empty_text = (TextView) rootView
				.findViewById(R.id.list_empty_text);

		events_list.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				Intent intent = null;
				LLDCApplication.selectedModel = recommandList.get(arg2);
				int i = LLDCApplication.selectedModel.getModelType();

				if (i == LLDCApplication.VENUE) {
					displayView(1, "Venues & Attractions");
				} else if (i == LLDCApplication.FACILITIES) {
					displayView(1, "Facilities");
				} else if (i == LLDCApplication.TRAILS) {
					displayView(1, "Trails");
				} else if (i == LLDCApplication.EVENT) {
					displayView(2, "Events");
				}
			}
		});

		onLoadDataFromDB();

		return rootView;

	}
	
	private boolean returnBackStackImmediate(FragmentManager fm) {
        List<Fragment> fragments = fm.getFragments();
        if (fragments != null && fragments.size() > 0) {
            for (Fragment fragment : fragments) {
                if (fragment.getChildFragmentManager().getBackStackEntryCount() > 0) {
                    if (fragment.getChildFragmentManager().popBackStackImmediate()) {
                        return true;
                    } else {
                        return returnBackStackImmediate(fragment.getChildFragmentManager());
                    }
                }
            }
        }
        return false;
    }

	void ChangeName(String szPageTitle) {
		((HomeActivityTablet) getActivity()).ivBack
				.setVisibility(View.INVISIBLE);
		((HomeActivityTablet) getActivity()).tvHeaderTitle.setText(szPageTitle);

	}

	private void displayView(int position, String szPagetitle) {
		Bundle bundle = new Bundle();
		bundle.putString("PAGETITLE", szPagetitle);
		String fragmentName = "";

		switch (position) {

		case 1:
			fragment = (Fragment) new ExploreListDetailsFragmentTablet();
			fragmentName = ExploreListDetailsFragmentTablet.class.getName();
			break;

		case 2:
			fragment = (Fragment) new EventDetailsFragmentTablet();
			fragmentName = EventDetailsFragmentTablet.class.getName();
			break;

		}

		if (fragment != null) {
			fragment.setArguments(bundle);
			mFragmentManager = getParentFragment().getChildFragmentManager();
			mFragmentManager
					.beginTransaction()
					.addToBackStack(ExploreFragment.class.getName())
					.replace(R.id.frame_container_parent, fragment,
							fragmentName)
					.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE)
					.commit();
		}
	}

	public void onLoadDataFromDB() {
		String pageTitle = "";
		Bundle bundle = new Bundle();
		bundle = getArguments();
		pageTitle = bundle.getString("PAGETITLE");
		try {
			String where = "";
			if (pageTitle.equals("relax")) {
				where = "1";
			} else if (pageTitle.equals("entertain")) {
				where = "2";
			} else if (pageTitle.equals("active")) {
				where = "3";
			}

			ArrayList<ServerModel> venueList1 = LLDCApplication.DBHelper
					.onGetVenueData(where);
			// ArrayList<ServerModel> venueList2 = LLDCApplication.DBHelper
			// .onGetTrailsData(where);
			// ArrayList<ServerModel> venueList3 = LLDCApplication.DBHelper
			// .onGetFacilitiesData(where);
			ArrayList<ServerModel> venueList4 = LLDCApplication.DBHelper
					.getEventData(where);
			recommandList.clear();
			for (int i = 0; i < venueList1.size(); i++) {
				recommandList.add(venueList1.get(i));
			}
			// for (int i = 0; i < venueList2.size(); i++) {
			// recommandList.add(venueList2.get(i));
			// }
			// for (int i = 0; i < venueList3.size(); i++) {
			// recommandList.add(venueList3.get(i));
			// }
			for (int i = 0; i < venueList4.size(); i++) {
				recommandList.add(venueList4.get(i));
			}

			if (recommandList.size() > 0) {
				events_list.setAdapter(new RecommendationListingAdapter(
						getActivity(), R.layout.recommendationlist_row,
						recommandList));
				list_empty_text.setVisibility(View.GONE);
			} else {
				list_empty_text.setVisibility(View.VISIBLE);
				events_list.setVisibility(View.GONE);
			}

			/* set explore adapter */
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
